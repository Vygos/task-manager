// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCount = `-- name: GetCount :one
SELECT count(*)
FROM tasks
WHERE deleted_at IS NULL
`

func (q *Queries) GetCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTask = `-- name: deleteTask :one
UPDATE tasks
SET deleted_at = now()
WHERE id = $1
RETURNING id, title, status, created_at, updated_at
`

func (q *Queries) deleteTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAll = `-- name: getAll :many
SELECT id, title, status, created_at, updated_at
FROM tasks
WHERE deleted_at IS NULL
order by created_at desc, updated_at desc
OFFSET $1 LIMIT $2
`

type getAllParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) getAll(ctx context.Context, arg getAllParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: getByID :one
SELECT id, title, status, created_at, updated_at
FROM tasks
WHERE id = $1
`

func (q *Queries) getByID(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveTask = `-- name: saveTask :one
INSERT INTO tasks (id, title, status, created_at, updated_at)
VALUES ($1, $2, $3, now(), now())
RETURNING id, title, status, created_at, updated_at
`

type saveTaskParams struct {
	ID     pgtype.UUID
	Title  string
	Status Status
}

func (q *Queries) saveTask(ctx context.Context, arg saveTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, saveTask, arg.ID, arg.Title, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: updateTask :one
UPDATE tasks
SET title  = $1,
    status = $2
WHERE id = $3
RETURNING id, title, status, created_at, updated_at
`

type updateTaskParams struct {
	Title  string
	Status Status
	ID     pgtype.UUID
}

func (q *Queries) updateTask(ctx context.Context, arg updateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask, arg.Title, arg.Status, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
